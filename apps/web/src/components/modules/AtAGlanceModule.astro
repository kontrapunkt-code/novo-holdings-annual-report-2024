---
import LandingLayout from "@/layouts/LandingLayout.astro";
import type { ModuleProps } from "@/scripts/types";
import type { LottieJSON } from "@lottielab/lottie-player";

type Props = ModuleProps<"atAGlanceModule">;

const animations = Object.entries(
	import.meta.glob<LottieJSON>("/public/animations/*.json", {
		eager: true,
	}),
);
---

<LandingLayout>
	<div class="col-span-4 md:col-span-6">
		<h2 class="headline-01">Novo Holdings at a Glance</h2>
	</div>
	<section
		class="add-a-glance-section col-span-4 md:col-span-6 grid md:grid-cols-2 gap-4"
	>
		{
			animations.map(([src, animation]) => (
				<div
					class="w-full bg-[#B2B7CD] rounded-lg overflow-hidden"
					style={`aspect-ratio: ${animation.w}/${animation.h}`}
				>
					<lottie-player
						src={src.replaceAll("/public", "")}
						class="w-full h-full at-a-glance-lottie"
					/>
				</div>
			))
		}
	</section>
</LandingLayout>

<script>
	import type { LottieWeb } from "@lottielab/lottie-player";
	import "@lottielab/lottie-player/web";

	async function playLotties() {
		const lotties: NodeListOf<LottieWeb> = document.querySelectorAll(
			"lottie-player.at-a-glance-lottie",
		);

		await Promise.all(
			[...lotties].map(
				(l) => new Promise((r) => l.addEventListener("load", r)),
			),
		);

		for (const lottie of lotties) {
			lottie.loop = false;
			lottie.pause();
		}

		for (const lottie of lotties) {
			lottie.play();

			await new Promise((resolve) => setTimeout(resolve, 100));
		}
	}

	playLotties();
</script>
