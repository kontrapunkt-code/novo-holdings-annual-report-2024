/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type ImageModule = {
	_type: "imageModule";
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	caption?: string;
};

export type TextModule = {
	_type: "textModule";
	content?: Array<{
		children?: Array<{
			marks?: Array<string>;
			text?: string;
			_type: "span";
			_key: string;
		}>;
		style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
		listItem?: "bullet" | "number";
		markDefs?: Array<{
			href?: string;
			_type: "link";
			_key: string;
		}>;
		level?: number;
		_type: "block";
		_key: string;
	}>;
};

export type HeroModule = {
	_type: "heroModule";
	title?: string;
	description?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
};

export type GlobalSettings = {
	_id: string;
	_type: "globalSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	globalTitle?: string;
	logo?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
		};
		_type: "file";
	};
	homePage?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "page";
	};
	loadingScreenTitle?: string;
	loadingScreenDescription?: string;
	loadingScreenButtonText?: string;
};

export type Page = {
	_id: string;
	_type: "page";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	modules?: Array<
		| ({
				_key: string;
		  } & HeroModule)
		| ({
				_key: string;
		  } & TextModule)
		| ({
				_key: string;
		  } & ImageModule)
	>;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Geopoint
	| ImageModule
	| TextModule
	| HeroModule
	| GlobalSettings
	| Page
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityImageMetadata
	| Slug
	| SanityFileAsset
	| SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./lib/queries.ts
// Variable: PAGES_QUERY
// Query: *[_type == "page"] {		title,		"slug": slug.current,		"modules": modules[] {			_type == "heroModule" => {				_type,				_key,				title,				description,				image,			},			_type == "textModule" => {				_type,				_key,				content			},			_type == "imageModule" => {				_type,				_key,				caption,				image,			}		}	}
export type PAGES_QUERYResult = Array<{
	title: string | null;
	slug: string | null;
	modules: Array<
		| {
				_type: "heroModule";
				_key: string;
				title: string | null;
				description: string | null;
				image: {
					asset?: {
						_ref: string;
						_type: "reference";
						_weak?: boolean;
						[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
					};
					hotspot?: SanityImageHotspot;
					crop?: SanityImageCrop;
					_type: "image";
				} | null;
		  }
		| {
				_type: "imageModule";
				_key: string;
				caption: string | null;
				image: {
					asset?: {
						_ref: string;
						_type: "reference";
						_weak?: boolean;
						[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
					};
					hotspot?: SanityImageHotspot;
					crop?: SanityImageCrop;
					_type: "image";
				} | null;
		  }
		| {
				_type: "textModule";
				_key: string;
				content: Array<{
					children?: Array<{
						marks?: Array<string>;
						text?: string;
						_type: "span";
						_key: string;
					}>;
					style?:
						| "blockquote"
						| "h1"
						| "h2"
						| "h3"
						| "h4"
						| "h5"
						| "h6"
						| "normal";
					listItem?: "bullet" | "number";
					markDefs?: Array<{
						href?: string;
						_type: "link";
						_key: string;
					}>;
					level?: number;
					_type: "block";
					_key: string;
				}> | null;
		  }
	> | null;
}>;
// Variable: GLOBAL_SETTINGS_QUERY
// Query: *[_type == "globalSettings"][0] {		globalTitle,		logo,		homePage->,		loadingScreenTitle,		loadingScreenDescription,		loadingScreenButtonText	}
export type GLOBAL_SETTINGS_QUERYResult = {
	globalTitle: string | null;
	logo: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
		};
		_type: "file";
	} | null;
	homePage: {
		_id: string;
		_type: "page";
		_createdAt: string;
		_updatedAt: string;
		_rev: string;
		title?: string;
		slug?: Slug;
		modules?: Array<
			| ({
					_key: string;
			  } & HeroModule)
			| ({
					_key: string;
			  } & ImageModule)
			| ({
					_key: string;
			  } & TextModule)
		>;
	} | null;
	loadingScreenTitle: string | null;
	loadingScreenDescription: string | null;
	loadingScreenButtonText: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
	interface SanityQueries {
		'\n\t*[_type == "page"] {\n\t\ttitle,\n\t\t"slug": slug.current,\n\t\t"modules": modules[] {\n\t\t\t_type == "heroModule" => {\n\t\t\t\t_type,\n\t\t\t\t_key,\n\t\t\t\ttitle,\n\t\t\t\tdescription,\n\t\t\t\timage,\n\t\t\t},\n\t\t\t_type == "textModule" => {\n\t\t\t\t_type,\n\t\t\t\t_key,\n\t\t\t\tcontent\n\t\t\t},\n\t\t\t_type == "imageModule" => {\n\t\t\t\t_type,\n\t\t\t\t_key,\n\t\t\t\tcaption,\n\t\t\t\timage,\n\t\t\t}\n\t\t}\n\t}\n': PAGES_QUERYResult;
		'\n\t*[_type == "globalSettings"][0] {\n\t\tglobalTitle,\n\t\tlogo,\n\t\thomePage->,\n\t\tloadingScreenTitle,\n\t\tloadingScreenDescription,\n\t\tloadingScreenButtonText\n\t}\n': GLOBAL_SETTINGS_QUERYResult;
	}
}
