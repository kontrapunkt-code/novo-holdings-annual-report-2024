/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type Service = {
	_id: string;
	_type: "service";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	category?: "Route" | "Location";
};

export type Route = {
	_id: string;
	_type: "route";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	start?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "location";
	};
	end?: {
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		[internalGroqTypeReferenceTo]?: "location";
	};
	waypoints?: Array<
		{
			_key: string;
		} & Geopoint
	>;
	type?: "ferry" | "rail";
	filterGroups?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "filterGroup";
	}>;
};

export type Location = {
	_id: string;
	_type: "location";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	geopoint?: Geopoint;
	location?: string;
	filterGroups?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "filterGroup";
	}>;
	isStory?: boolean;
	title?: string;
	image?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		_type: "image";
	};
	description?: string;
	isFeaturedStory?: boolean;
	link?: {
		title?: string;
		url?: string;
	};
	category?: {
		title?:
			| "Logistics solutions"
			| "Passenger ferry routes"
			| "Freight ferry routes"
			| "Port terminals"
			| "Logistics transport";
		icon?:
			| "logistics_solutions"
			| "passenger_ferry_routes"
			| "freight_ferry_routes"
			| "port_terminals"
			| "logistics_transport";
	};
	services?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "service";
	}>;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type GlobalSettings = {
	_id: string;
	_type: "globalSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	globalTitle?: string;
	logo?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
		};
		_type: "file";
	};
	loadingScreenTitle?: string;
	loadingScreenDescription?: string;
	loadingScreenButtonText?: string;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type FilterGroup = {
	_id: string;
	_type: "filterGroup";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	orderRank?: string;
	title?: string;
	description?: string;
	icon?:
		| "add"
		| "book_5"
		| "check"
		| "checkbox"
		| "checkbox_checked_filled"
		| "checkmark"
		| "chevron_down"
		| "circle_solid"
		| "close"
		| "code"
		| "copy"
		| "cursor_2"
		| "draw"
		| "edit"
		| "erase"
		| "error"
		| "ferry_legend"
		| "freight_ferry_routes"
		| "label"
		| "line_end_circle"
		| "line_start_circle"
		| "link"
		| "location"
		| "location_legend"
		| "logistics_solutions"
		| "logistics_transport"
		| "menu"
		| "move"
		| "passenger_ferry_routes"
		| "pen_fountain"
		| "port_terminals"
		| "rail_legend"
		| "remove"
		| "renew"
		| "reset"
		| "save"
		| "subtract"
		| "sync"
		| "undo"
		| "upload";
	facts?: Array<string>;
	services?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "service";
	}>;
};

export type Countries = {
	_id: string;
	_type: "countries";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	countriesToExclude?: Array<string>;
};

export type AllSanitySchemaTypes =
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| Slug
	| Service
	| Route
	| Location
	| SanityImageCrop
	| SanityImageHotspot
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| GlobalSettings
	| SanityFileAsset
	| SanityAssetSourceData
	| FilterGroup
	| Countries;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./lib/queries.ts
// Variable: GLOBAL_SETTINGS_QUERY
// Query: *[_type == "globalSettings"]
export type GLOBAL_SETTINGS_QUERYResult = Array<{
	_id: string;
	_type: "globalSettings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	globalTitle?: string;
	logo?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.fileAsset";
		};
		_type: "file";
	};
	loadingScreenTitle?: string;
	loadingScreenDescription?: string;
	loadingScreenButtonText?: string;
}>;
// Variable: ROUTE_QUERY
// Query: {    "type": "FeatureCollection",    "features": *[_type == "route"] {        "type": "Feature",        "geometry": {            "type": "LineString",            "coordinates":                 // Start                [[coalesce(start->geopoint.lng, 0), coalesce(start->geopoint.lat, 0)]] +                // Waypoints                coalesce(waypoints[] { "p": [coalesce(lng, 0), coalesce(lat, 0)] }.p, []) +                // End                [[coalesce(end->geopoint.lng, 0), coalesce(end->geopoint.lat, 0)]],        },        "properties": {            "id": _id,            "location": start->location + " â†” " + end->location,            "type": coalesce(type, "ferry"),            "filter_groups": filterGroups[]._ref,            "start": start._ref,            "end": end._ref,        },    },}
export type ROUTE_QUERYResult = {
	type: "FeatureCollection";
	features: Array<{
		type: "Feature";
		geometry: {
			type: "LineString";
			coordinates: Array<Array<number | 0>>;
		};
		properties: {
			id: string;
			location: string | null;
			type: "ferry" | "rail";
			filter_groups: Array<string> | null;
			start: string | null;
			end: string | null;
		};
	}>;
};
// Variable: COUNTRY_QUERY
// Query: {    "countriesToExclude": *[_type == "countries"][0].countriesToExclude,}
export type COUNTRY_QUERYResult = {
	countriesToExclude: Array<string> | null;
};
// Variable: LOCATION_QUERY
// Query: {    "type": "FeatureCollection",    "features": *[_type == "location"] {        "type": "Feature",        "geometry": {            "type": "Point",            "coordinates": [coalesce(geopoint.lng, 0), coalesce(geopoint.lat, 0)],        },        "properties": {            "id": _id,            "is_location": true,            "location": location,            "is_story": coalesce(isStory, false),            "description": description,            "is_featured_story": coalesce(isFeaturedStory, false),            "image_url": image.asset->url + "?auto=format&w=72&h=72&fit=crop",            "link_title": coalesce(link.title, "Read more"),            "link_url": link.url,            "category_title": category.title,            "category_icon": category.icon,            "filter_groups": coalesce(filterGroups[]._ref, [_id]),            "cluster": false,            "scale": 1,        },    },}
export type LOCATION_QUERYResult = {
	type: "FeatureCollection";
	features: Array<{
		type: "Feature";
		geometry: {
			type: "Point";
			coordinates: Array<number | 0>;
		};
		properties: {
			id: string;
			is_location: true;
			location: string | null;
			is_story: boolean | false;
			description: string | null;
			is_featured_story: boolean | false;
			image_url: string | null;
			link_title: string | "Read more";
			link_url: string | null;
			category_title:
				| "Freight ferry routes"
				| "Logistics solutions"
				| "Logistics transport"
				| "Passenger ferry routes"
				| "Port terminals"
				| null;
			category_icon:
				| "freight_ferry_routes"
				| "logistics_solutions"
				| "logistics_transport"
				| "passenger_ferry_routes"
				| "port_terminals"
				| null;
			filter_groups: Array<string>;
			cluster: false;
			scale: 1;
		};
	}>;
};
// Variable: FILTER_GROUP_QUERY
// Query: *[_type == "filterGroup"] | order(orderRank) {    _id,    title,    description,    icon,    services[] {        _ref,    },}
export type FILTER_GROUP_QUERYResult = Array<{
	_id: string;
	title: string | null;
	description: string | null;
	icon:
		| "add"
		| "book_5"
		| "check"
		| "checkbox_checked_filled"
		| "checkbox"
		| "checkmark"
		| "chevron_down"
		| "circle_solid"
		| "close"
		| "code"
		| "copy"
		| "cursor_2"
		| "draw"
		| "edit"
		| "erase"
		| "error"
		| "ferry_legend"
		| "freight_ferry_routes"
		| "label"
		| "line_end_circle"
		| "line_start_circle"
		| "link"
		| "location_legend"
		| "location"
		| "logistics_solutions"
		| "logistics_transport"
		| "menu"
		| "move"
		| "passenger_ferry_routes"
		| "pen_fountain"
		| "port_terminals"
		| "rail_legend"
		| "remove"
		| "renew"
		| "reset"
		| "save"
		| "subtract"
		| "sync"
		| "undo"
		| "upload"
		| null;
	services: Array<{
		_ref: string;
	}> | null;
}>;
// Variable: IMAGES_QUERY
// Query: *[_type == "location" && defined(image)] {    "params": {        "id": _id,    },    "props": {        "url": image.asset->url + "?format=webp&w=72&h=72&fit=crop",    },}
export type IMAGES_QUERYResult = Array<{
	params: {
		id: string;
	};
	props: {
		url: string | null;
	};
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
	interface SanityQueries {
		'\n*[_type == "globalSettings"]\n': GLOBAL_SETTINGS_QUERYResult;
		'\n{\n    "type": "FeatureCollection",\n    "features": *[_type == "route"] {\n        "type": "Feature",\n        "geometry": {\n            "type": "LineString",\n            "coordinates": \n                // Start\n                [[coalesce(start->geopoint.lng, 0), coalesce(start->geopoint.lat, 0)]] +\n                // Waypoints\n                coalesce(waypoints[] { "p": [coalesce(lng, 0), coalesce(lat, 0)] }.p, []) +\n                // End\n                [[coalesce(end->geopoint.lng, 0), coalesce(end->geopoint.lat, 0)]],\n        },\n        "properties": {\n            "id": _id,\n            "location": start->location + " \u2194 " + end->location,\n            "type": coalesce(type, "ferry"),\n            "filter_groups": filterGroups[]._ref,\n            "start": start._ref,\n            "end": end._ref,\n        },\n    },\n}\n': ROUTE_QUERYResult;
		'\n{\n    "countriesToExclude": *[_type == "countries"][0].countriesToExclude,\n}\n': COUNTRY_QUERYResult;
		'\n{\n    "type": "FeatureCollection",\n    "features": *[_type == "location"] {\n        "type": "Feature",\n        "geometry": {\n            "type": "Point",\n            "coordinates": [coalesce(geopoint.lng, 0), coalesce(geopoint.lat, 0)],\n        },\n        "properties": {\n            "id": _id,\n            "is_location": true,\n            "location": location,\n            "is_story": coalesce(isStory, false),\n            "description": description,\n            "is_featured_story": coalesce(isFeaturedStory, false),\n            "image_url": image.asset->url + "?auto=format&w=72&h=72&fit=crop",\n            "link_title": coalesce(link.title, "Read more"),\n            "link_url": link.url,\n            "category_title": category.title,\n            "category_icon": category.icon,\n            "filter_groups": coalesce(filterGroups[]._ref, [_id]),\n            "cluster": false,\n            "scale": 1,\n        },\n    },\n}\n': LOCATION_QUERYResult;
		'\n*[_type == "filterGroup"] | order(orderRank) {\n    _id,\n    title,\n    description,\n    icon,\n    services[] {\n        _ref,\n    },\n}\n': FILTER_GROUP_QUERYResult;
		'\n*[_type == "location" && defined(image)] {\n    "params": {\n        "id": _id,\n    },\n    "props": {\n        "url": image.asset->url + "?format=webp&w=72&h=72&fit=crop",\n    },\n}\n': IMAGES_QUERYResult;
	}
}
